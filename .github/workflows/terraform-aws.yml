name: Terraform AWS 三层架构部署

# 触发条件：推送代码到所有分支，或手动触发
on:
  push:
    branches: [ "**" ]  # 所有分支推送时触发
  workflow_dispatch:  # 允许手动触发

# 环境变量配置
env:
  TF_STATE_BUCKET: "james-tf-state-bucket-ap-southeast-1"  # 你的S3桶名
  TF_STATE_KEY: "three-tier/terraform.tfstate"  # 状态文件路径
  APP_NAME: "my-app"
  # 引用仓库 Secrets（敏感信息，自动注入所有 Job）
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}

jobs:
  # 1. 验证Terraform配置
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"  # 匹配指定版本

      - name: 初始化Terraform后端
        run: |
          export
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="region=$AWS_REGION"

      - name: 验证配置
        run: terraform validate

  # 2. 生成部署计划
  plan:
    runs-on: ubuntu-latest
    needs: validate  # 依赖validate阶段成功完成
    outputs:
      tfplan_exitcode: ${{ steps.plan.outputs.exitcode }}  # 输出计划执行结果码
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: 初始化Terraform后端
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="region=$AWS_REGION"

      - name: 生成部署计划
        id: plan
        run: |
          terraform plan \
            -var "availability_zones=[\"ap-southeast-1a\", \"ap-southeast-1b\"]" \
            -out=tfplan
          echo "exitcode=$?" >> $GITHUB_OUTPUT  # 捕获计划执行结果码

      - name: 保存部署计划作为artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan  # 保存计划文件供后续阶段使用

  # 3. 部署资源（仅main分支，手动批准）
  apply:
    runs-on: ubuntu-latest
    needs: plan
    environment: production  # 关联到GitHub环境，用于设置手动批准
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: 初始化Terraform后端
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="region=$AWS_REGION"

      - name: 下载部署计划
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .  # 下载到当前目录

      - name: 应用部署计划
        run: terraform apply tfplan

  # 4. 生成销毁计划
  plan-destroy:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: 初始化Terraform后端
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="region=$AWS_REGION"

      - name: 生成销毁计划
        run: |
          terraform plan \
            -var "availability_zones=[\"ap-southeast-1a\", \"ap-southeast-1b\"]" \
            -destroy \
            -out=tfdestroyplan

      - name: 保存销毁计划作为artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfdestroyplan
          path: tfdestroyplan  # 保存销毁计划

  # 5. 销毁资源（手动触发）
  destroy:
    runs-on: ubuntu-latest
    needs: plan-destroy
    environment: destroy  # 用于设置手动批准
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: 初始化Terraform后端
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="region=$AWS_REGION"

      - name: 下载销毁计划
        uses: actions/download-artifact@v4
        with:
          name: tfdestroyplan
          path: .  # 下载到当前目录

      - name: 执行销毁操作
        run: terraform apply tfdestroyplan
